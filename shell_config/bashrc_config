#!/bin/bash
#
# This script contains shareable functions and the welcome message logic.
# It sources an optional private configuration from ~/.config/bash-personal/config.

# --- Configuration with Private Overrides ---
# Source the optional private configuration file if it exists.
# This allows overriding the default variables defined below.
PRIVATE_CONFIG_FILE="$HOME/.config/bash-personal/config"
if [ -f "$PRIVATE_CONFIG_FILE" ]; then
    source "$PRIVATE_CONFIG_FILE"
fi

# Set safe, shareable defaults. These are used if not set in the private config.
# Using ${VAR:-default} is a robust way to set defaults.
FIGLET_TEXT="${FIGLET_TEXT:-Welcome}"
LOCATION="${LOCATION:-}" # Default to empty for IP-based geo-lookup by wttr.in.
PROJECTS_BASE_DIR="${PROJECTS_BASE_DIR:-$HOME/projects}"

#
# my_help: An interactive command palette powered by fzf.
#
my_help() {
    # Ensure fzf is available before proceeding.
    if ! command -v fzf &>/dev/null; then
        printf "Error: fzf command not found. Please install it to use this feature.\n" >&2
        return 1
    fi

    # A heredoc provides a clean way to format the list of commands.
    # This list is piped into fzf for an interactive search experience.
    cat <<EOF | fzf --height=60% --reverse --border=rounded --header="Fuzzy Find Your Custom Commands"
# --- System & Setup ---
update_system           - Update and clean the system (Debian/APT).
install_links           - Re-links all configurations from the repository.

# --- Project Management ---
p                       - Interactively select a project to open in nvim.
newpy <name>            - (Alias) Create a new boilerplate Python project.
newweb <name>           - (Alias) Create a new boilerplate HTML/CSS/JS project.

# --- Navigation ---
..                      - Go up one directory.
...                     - Go up two directories.
....                    - Go up three directories.

# --- Backups & Sync ---
backupd <dir>           - (Alias) Create a timestamped .tar.gz backup of a directory.
syncd <src> <dest>      - (Alias) Mirror a directory using rsync (with --delete).

# --- Daily Helpers ---
remindme                - (Alias) Set a future desktop/email reminder.
ochat [model]           - (Alias) Start an interactive chat with an Ollama model.
serveh [port]           - (Alias) Start a simple web server in the current directory.
rgf <pattern> [path]    - (Alias) Search for a text pattern with ripgrep.
lznpm                   - (Alias) Open lazygit, a terminal UI for npm.
lzgit                   - (Alias) Open lazygit, a terminal UI for git.
EOF
}

#
# p: A function to interactively find and open a project.
# It cds into the selected directory, activates a Python venv if present,
# and opens Neovim.
#
p() {
    # Use local variables to prevent polluting the global shell environment.
    local selected_proj_path

    if ! command -v fzf &>/dev/null; then
        printf "Error: fzf is required but not found.\n" >&2
        return 1
    fi

    if [ ! -d "$PROJECTS_BASE_DIR" ]; then
        printf "Error: Project directory '%s' not found.\n" "$PROJECTS_BASE_DIR" >&2
        return 1
    fi

    # Use 'fd' if available (faster and simpler), otherwise fall back to a robust 'find'.
    # The 'then' keyword is mandatory for the if-else block.
    if command -v fd &>/dev/null; then
        selected_proj_path=$(fd . "$PROJECTS_BASE_DIR" --type d --max-depth 1 | fzf --height=40% --reverse --prompt="Select Project > ")
    else
        # The find command now uses -print0 and fzf --read0 to handle names with spaces.
        selected_proj_path=$(find "$PROJECTS_BASE_DIR" -mindepth 1 -maxdepth 1 -type d -print0 | fzf --read0 --height=40% --reverse --prompt="Select Project > ")
    fi

    # Proceed only if a project was selected (fzf returns empty on Esc).
    if [ -n "$selected_proj_path" ]; then
        cd "$selected_proj_path" || return
        printf "Changed directory to: %s\n" "$(pwd)"

        # Activate Python virtual environment if it exists.
        if [ -f ".venv/bin/activate" ]; then
            printf "Activating Python virtual environment...\n"
            source .venv/bin/activate
        fi

        # Open Neovim if it's installed.
        if command -v nvim &>/dev/null; then
            printf "Opening nvim...\n"
            nvim
        else
            printf "nvim command not found.\n"
        fi
    else
        printf "No project selected.\n"
    fi
}


# --- Custom Welcome Message ---
# This logic runs each time a new interactive terminal is opened.
if [[ $- == *i* ]]; then
    printf "\n" # Start with a blank line for spacing.

    # 1. Display ASCII Art Banner.
    if command -v figlet &>/dev/null && command -v lolcat &>/dev/null; then
        figlet "$FIGLET_TEXT" | lolcat
    else
        printf "=============================\n"
        printf "        %s\n" "$FIGLET_TEXT"
        printf "=============================\n"
    fi
    printf "\n"

    # 2. Display a Time-Based Greeting.
    CURRENT_HOUR=$(date +%H)
    USERNAME=$(whoami)
    GREETING="Good evening"
    if [ "$CURRENT_HOUR" -ge 5 ] && [ "$CURRENT_HOUR" -lt 12 ]; then
        GREETING="Good morning"
    elif [ "$CURRENT_HOUR" -ge 12 ] && [ "$CURRENT_HOUR" -lt 18 ]; then
        GREETING="Good afternoon"
    fi
    
    if command -v lolcat &>/dev/null; then
        printf "%s, %s!\n\n" "$GREETING" "$USERNAME" | lolcat
    else
        printf "%s, %s!\n\n" "$GREETING" "$USERNAME"
    fi

    # 3. Display Weather Information.
    if command -v lolcat &>/dev/null; then
        printf "* Weather Info:\n" | lolcat
    else
        printf "* Weather Info:\n"
    fi

    if command -v curl &>/dev/null; then
        # Use -fsSL to fail silently, show errors, and FOLLOW REDIRECTS (-L).
        weather=$(curl -fsSL --connect-timeout 5 --max-time 10 \
            -A "my-linux-setup-bash-prompt" \
            "wttr.in/$LOCATION?format=3")
        if [ -n "$weather" ]; then
            printf "  %s\n" "$weather"
        else
            printf "  (Could not retrieve weather. Check connection or LOCATION in %s)\n" "$PRIVATE_CONFIG_FILE"
        fi
    else
        printf "  (Install 'curl' to see weather information)\n"
    fi
    printf "\n"

    # 4. Display a Handy Command Reference.
    printf -- "--------------------------------------------------------\n"
    if command -v lolcat &>/dev/null; then
      printf "Quick Command Reference:\n" | lolcat
    else
      printf "Quick Command Reference:\n"
    fi
    printf "  %-22s - %s\n" "p" "Interactively select a project to open."
    printf "  %-22s - %s\n" "my_help" "Fuzzy find all custom commands."
    printf "  %-22s - %s\n" "update_system" "Update and clean the system (APT)."
    printf -- "--------------------------------------------------------\n"
fi

# --- Initialize Zoxide ---
# A smarter cd command that learns your habits.
if command -v zoxide &>/dev/null; then
    eval "$(zoxide init bash)"
fi
