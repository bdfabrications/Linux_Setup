# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Alias for running the system update script with sudo
alias update-sys='sudo $HOME/bin/update_system.sh'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
#if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
#    . /etc/bash_completion
#fi

# Initialize Oh My Posh prompt
eval "$(/usr/local/bin/oh-my-posh init bash --config "$HOME/.poshthemes/jandedobbeleer.omp.json")"

# Add ~/bin to PATH if it exists and isn't already there
if [ -d "$HOME/bin" ] && [[ ":$PATH:" != *":$HOME/bin:"* ]]; then
    PATH="$HOME/bin:$PATH"
fi
export PATH

# ... (existing content of bashrc_config like Oh My Posh init, PATH export) ...

# --- Custom Welcome Message ---
echo "" # Start with a blank line

# Configuration
LOCATION="78070"
FIGLET_TEXT="o7 Tester"

# Dependencies Check
FIGLET_CMD=$(command -v figlet)
CURL_CMD=$(command -v curl)

# 1. Display ASCII Art Banner
if [ -x "$FIGLET_CMD" ]; then
    $FIGLET_CMD "$FIGLET_TEXT"
else
    echo "============================="
    echo "      Welcome Back!"
    echo "============================="
fi
echo "" 

# 2. Display Time-Based Greeting
CURRENT_HOUR=$(date +%H)
USERNAME=$(whoami) 
GREETING="Good evening" 
if [ "$CURRENT_HOUR" -ge 5 ] && [ "$CURRENT_HOUR" -lt 12 ]; then
    GREETING="Good morning"
elif [ "$CURRENT_HOUR" -ge 12 ] && [ "$CURRENT_HOUR" -lt 18 ]; then
    GREETING="Good afternoon"
fi
echo "$GREETING, $USERNAME!"
echo ""

# 3. Display Weather
if [ -x "$CURL_CMD" ]; then
    # echo "Checking weather for $LOCATION..." # Optional: Can remove this line for cleaner output
    weather=$(curl -s --connect-timeout 5 --max-time 10 "wttr.in/$LOCATION?format=3")
    if [ $? -eq 0 ] && [ -n "$weather" ]; then
        echo "$weather"
    # else # Optional: Can remove error message for cleaner output
        # echo "Could not retrieve weather information."
    fi
fi
echo ""

# --- Handy Scripts ---
echo "Available custom commands:"
echo "  update-sys              - Update system packages (needs sudo password)"
echo "  backup_dir.sh <dir>     - Create backup of <dir> in ~/backups"
echo "  new_pyproject.sh <Name> - Create basic Python project structure"
echo "  rgf.sh <pattern> [path] - Search for text using ripgrep"
echo "  serve_here.sh [port]    - Start simple web server in current directory"
echo "  ollama_chat.sh [model]  - Start interactive chat with Ollama (default: phi3)"
echo "" # Add blank line after list

# --- End Custom Welcome Message ---
