# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
#if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
#    debian_chroot=$(cat /etc/debian_chroot)
#fi

# set a fancy prompt (non-color, unless we know we "want" color)
# This section is likely overridden by Oh My Posh below, but kept for reference
# case "$TERM" in
#     xterm-color) color_prompt=yes;;
# esac
# #force_color_prompt=yes
# if [ -n "$force_color_prompt" ]; then
#     if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
#   color_prompt=yes
#     else
#   color_prompt=
#     fi
# fi
# if [ "$color_prompt" = yes ]; then
#     PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
# else
#     PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
# fi
# unset color_prompt force_color_prompt
# case "$TERM" in
# xterm*|rxvt*)
#     PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
#     ;;
# *)
#     ;;
# esac

# Alias definitions moved to ~/.bash_aliases
# Source ~/.bash_aliases if it exists
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# Initialize Oh My Posh prompt
# Make sure oh-my-posh binary is found correctly
if command -v oh-my-posh &> /dev/null; then
    eval "$(oh-my-posh init bash --config "$HOME/.poshthemes/jandedobbeleer.omp.json")"
else
    echo "[Warning] oh-my-posh command not found. Cannot initialize prompt theme." >&2
fi

# Add ~/bin to PATH if it exists and isn't already there
if [ -d "$HOME/bin" ] && [[ ":$PATH:" != *":$HOME/bin:"* ]]; then
    PATH="$HOME/bin:$PATH"
fi
# Add ~/.local/bin to PATH if it exists and isn't already there (Common for pipx etc)
if [ -d "$HOME/.local/bin" ] && [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
    PATH="$HOME/.local/bin:$PATH"
fi
export PATH


# --- Custom Welcome Message ---
echo "" # Start with a blank line

# Configuration for Welcome Message
LOCATION="78070" # Set default, remind user to change if needed
FIGLET_TEXT="o7 Tester" # Text for the figlet banner

# Dependencies Check for Welcome Message
FIGLET_CMD=$(command -v figlet)
CURL_CMD=$(command -v curl)

# 1. Display ASCII Art Banner
if [ -x "$FIGLET_CMD" ]; then
    $FIGLET_CMD "$FIGLET_TEXT"
else
    echo "============================="
    echo "      Welcome Back!"
    echo "============================="
fi
echo "" 

# 2. Display Time-Based Greeting
CURRENT_HOUR=$(date +%H)
USERNAME=$(whoami) 
GREETING="Good evening" 
if [ "$CURRENT_HOUR" -ge 5 ] && [ "$CURRENT_HOUR" -lt 12 ]; then
    GREETING="Good morning"
elif [ "$CURRENT_HOUR" -ge 12 ] && [ "$CURRENT_HOUR" -lt 18 ]; then
    GREETING="Good afternoon"
fi
echo "$GREETING, $USERNAME!"
echo ""

# 3. Display Weather (Optional - Uncomment and set LOCATION in ~/.bashrc or here)
echo "* Weather Info:"
if [ -x "$CURL_CMD" ]; then
    # LOCATION should be set by user if desired, or leave blank for IP guess
    if [ -n "$LOCATION" ]; then
        weather=$(curl -s --connect-timeout 5 --max-time 10 "wttr.in/$LOCATION?format=3")
        if [ $? -eq 0 ] && [ -n "$weather" ]; then
            echo "  $weather"
        else
            echo "  (Could not retrieve weather for $LOCATION)"
        fi
    else
        echo "  (Set LOCATION in ~/.bashrc to enable weather)"
    fi
else
    echo "  (Install 'curl' to enable weather)"
fi
echo ""

# --- Handy Scripts ---
echo "Available custom commands:"
echo ""
echo "  update-sys    - Update system packages (needs sudo password)" 
echo "  newweb <Name> - Create basic HTML/CSS/JS project structure (incl. Git)"
echo "  newpy <Name>  - Create Python project structure (incl. Git, .venv, .gitignore)" 
echo "  p             - Select project (in ~/projects), cd, activate venv (if found), open nvim" 
echo ""
echo "  backupd <dir> - Create backup of <dir> in ~/backups" 
echo "  serveh [port] - Start simple web server in current directory"
echo "  rgf <pat> [path] - Search for text using ripgrep"
echo "  ochat [model] - Start interactive chat with Ollama (default: phi3)"
echo "" 
echo "* Python Tip: For Python projects not created via script,"
echo "  run 'python3 -m venv .venv' inside the project root. The 'p' command"
echo "  will then automatically activate it when you select that project."
echo "" 
# --- End Custom Welcome Message ---


# Function to cd into a project dir selected via fzf, activate venv, and open nvim
p() {
    # Define the base directory where your projects are stored
    local PROJECTS_BASE_DIR="$HOME/projects"
    local selected_proj_path

    # Check if fzf command exists
    if ! command -v fzf &> /dev/null; then
        echo "Error: fzf command not found. Install with 'sudo apt install fzf'." >&2 
        return 1
    fi
    
    # Check if the base project directory exists
    if [ ! -d "$PROJECTS_BASE_DIR" ]; then
        echo "Error: Project base directory '$PROJECTS_BASE_DIR' not found." >&2
        echo "Please create it or change the PROJECTS_BASE_DIR variable in this function." >&2
        return 1
    fi

    # Use find (or fd if available) to list directories one level deep
    echo "Searching for projects in $PROJECTS_BASE_DIR..." >&2 # Send search message to stderr
    if command -v fd &> /dev/null; then
         selected_proj_path=$(fd . "$PROJECTS_BASE_DIR" --type d --max-depth 1 | fzf --height 40% --reverse --prompt="Select Project > ")
    else
        selected_proj_path=$(find "$PROJECTS_BASE_DIR" -mindepth 1 -maxdepth 1 -type d | fzf --height 40% --reverse --prompt="Select Project > ")
    fi

    # Check if fzf returned successfully and a path was selected
    local fzf_exit_code=$?
    if [ $fzf_exit_code -eq 0 ] && [ -n "$selected_proj_path" ]; then
         if [ -d "$selected_proj_path" ]; then
            # Change directory IN THE CURRENT SHELL
            cd "$selected_proj_path" || { echo "Error changing to directory." >&2; return 1; } 
            echo "Changed to: $(pwd)"

            # Activate venv if present
            if [ -f ".venv/bin/activate" ]; then
                echo "Activating Python virtual environment (.venv)..."
                source .venv/bin/activate
            elif [ -f "venv/bin/activate" ]; then
                 echo "Activating Python virtual environment (venv)..."
                 source venv/bin/activate
            fi

            # Open Neovim
            if command -v nvim &> /dev/null; then
                echo "Opening nvim..."
                nvim
            else
                 echo "nvim command not found." >&2
                 return 0 
            fi
        else
             echo "Invalid selection." >&2
             return 1
        fi
    elif [ $fzf_exit_code -eq 130 ]; then
         echo "No project selected." # User cancelled
         return 0 
    else
         echo "Fzf selection error or no projects found." >&2
         return 1
    fi
}
